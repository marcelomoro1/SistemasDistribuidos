/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package exemplo2_gerarEmail;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author laboratorio
 */
public class IntefaceServidor extends javax.swing.JFrame {
    private Set<Pessoa> listaDePessoas; // Usamos HashSet para evitar duplicação de Pessoas
    /**
     * Creates new form Frame
     */
    public IntefaceServidor() {
        initComponents();
        listaDePessoas = new HashSet<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txt_Porta = new javax.swing.JTextField();
        btn_Porta = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt_area = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Porta: ");

        txt_Porta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_PortaActionPerformed(evt);
            }
        });

        btn_Porta.setText("Ligar");
        btn_Porta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_PortaActionPerformed(evt);
            }
        });

        txt_area.setColumns(20);
        txt_area.setRows(5);
        jScrollPane1.setViewportView(txt_area);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addGap(100, 100, 100)
                        .addComponent(txt_Porta, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46)
                        .addComponent(btn_Porta))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 629, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txt_Porta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_Porta))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txt_PortaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_PortaActionPerformed
           
    }//GEN-LAST:event_txt_PortaActionPerformed

    private void btn_PortaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_PortaActionPerformed
    // Iniciando em uma nova thread
    new Thread(() -> {
        System.out.println("Iniciando o servidor...");
        try {
            String porta = txt_Porta.getText();
            int portaServidor = Integer.parseInt(porta);
            ServerSocket servidorSocket = new ServerSocket(portaServidor);
            System.out.println("Servidor ouvindo a porta: " + porta);

            // Adiciona a mensagem inicial na JTextArea
            atualizaAreaTexto("Servidor iniciado na porta: " + porta);

            while (true) {
                Socket cliente = servidorSocket.accept();
                String enderecoIP = cliente.getInetAddress().getHostAddress();
                int portaCliente = cliente.getPort();
                System.out.println("Cliente conectado no IP: " + enderecoIP);
                System.out.println("Cliente conectado via porta: " + portaCliente);
                
                // Inicia a thread para receber dados do cliente
                ThreadRecebedora threadRecebedora = new ThreadRecebedora(cliente, listaDePessoas, this);
                threadRecebedora.start();
            }
        } catch (IOException ex) {
            Logger.getLogger(IntefaceServidor.class.getName()).log(Level.SEVERE, null, ex);
            // Em caso de erro, também atualiza a interface
            atualizaAreaTexto("Erro ao iniciar o servidor: " + ex.getMessage());
        }
    }).start();
    
    // Desabilita o botão para evitar múltiplas instâncias
    btn_Porta.setEnabled(false);
    }//GEN-LAST:event_btn_PortaActionPerformed

   
public void atualizaAreaTexto(final String texto) {
    // Garantir que a atualização seja feita na thread da interface gráfica
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
        @Override
        public void run() {
            // Verificação do estado de visibilidade e do tamanho da JTextArea
            System.out.println("txt_area visível: " + txt_area.isVisible());
            System.out.println("txt_area tamanho: " + txt_area.getSize());
            System.out.println("Conteúdo atual da área de texto: " + txt_area.getText());

            // Debug para ver o que está sendo passado
            System.out.println("Atualizando área de texto: " + texto);

            if (txt_area != null) {
                // Verificar o texto antes e depois da atualização
                System.out.println("Texto antes do append: " + txt_area.getText());
                txt_area.append(texto + "\n");
                System.out.println("Texto após append: " + txt_area.getText());
                
                txt_area.setCaretPosition(txt_area.getDocument().getLength());
                txt_area.setEditable(false);

                txt_area.setPreferredSize(new java.awt.Dimension(600, 400)); // Ajuste o tamanho conforme necessário
                txt_area.revalidate();
                txt_area.repaint();
                
                
                // Verificação do conteúdo após o repaint
                System.out.println("Conteúdo após repaint: " + txt_area.getText());
            } else {
                System.out.println("txt_area está nulo!");
            }
        }
    });
}
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IntefaceServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IntefaceServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IntefaceServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IntefaceServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IntefaceServidor().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Porta;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txt_Porta;
    private javax.swing.JTextArea txt_area;
    // End of variables declaration//GEN-END:variables
}
